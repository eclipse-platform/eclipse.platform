<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.eclipse.core.resources">
<annotation>
      <appInfo>
         <meta.schema plugin="org.eclipse.core.resources" id="refreshProviders" name="Auto-refresh providers"/>
      </appInfo>
      <documentation>
         The workspace supports a mode where changes that occur in the file system are automatically detected and reconciled with the workspace in memory. By default, this is accomplished by creating a monitor that polls the file system and periodically searching for changes.  The monitor factories extension point allows clients to create more efficient monitors, typically by hooking into some native file system facility for change callbacks.
      </documentation>
   </annotation>

   <element name="extension">
      <complexType>
         <sequence>
            <element ref="refreshProvider"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="refreshProvider">
      <complexType>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  A human-readable name for the monitor factory
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  The fully qualified name of a class implementing &lt;code&gt;org.eclipse.core.resources.refresh.RefreshProvider&lt;/code&gt;.
               </documentation>
               <appInfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.core.resources.refresh.RefreshProvider"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appInfo>
         <meta.section type="since"/>
      </appInfo>
      <documentation>
         3.0
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="examples"/>
      </appInfo>
      <documentation>
         Following is an example of an adapter declaration.  This example declares that this plug-in will provide an adapter factory that will adapt objects of type IFile to objects of type MyFile.
&lt;p&gt;
&lt;pre&gt;
   &lt;extension
         id=&quot;coolProvider&quot;
         point=&quot;org.eclipse.core.resources.refreshProviders&quot;&gt;
      &lt;refreshProvider
            name=&quot;Cool Refresh Provider&quot;
            class=&quot;com.xyz.CoolRefreshProvider&quot;&gt;
      &lt;/refreshProvider&gt;
   &lt;/extension&gt;
&lt;/pre&gt;
&lt;/p&gt;
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="apiInfo"/>
      </appInfo>
      <documentation>
         Refresh provider implementations must subclass the abstract type &lt;tt&gt;RefreshProvider&lt;/tt&gt; in the &lt;tt&gt;org.eclipse.core.resources.refresh&lt;/tt&gt; package.  Refresh requests and failures should be forward to the provide &lt;tt&gt;IRefreshResult&lt;/tt&gt;.  Clients must also provide an implementation of &lt;tt&gt;IRefreshMonitor&lt;/tt&gt; through which the workspace can request that refresh monitors be uninstalled.
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="implementation"/>
      </appInfo>
      <documentation>
         The &lt;tt&gt;org.eclipse.core.resources.win32&lt;/tt&gt; fragment provides a native refresh monitor that uses win32 file system notification callbacks.  The workspace also supplies a default naive polling-based monitor that can be used for file systems that do not have native refresh callbacks available.
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="copyright"/>
      </appInfo>
      <documentation>
         Copyright (c) 2004, 2005 IBM Corporation and others.&lt;br&gt;

This program and the accompanying materials are made 
available under the terms of the Eclipse Public License 2.0 which 
accompanies 
this distribution, and is available at 
&lt;a 
href=&quot;https://www.eclipse.org/legal/epl-2.0&quot;&gt;https://www.eclipse.org/legal/epl-v20.html&lt;/a&gt;/

SPDX-License-Identifier: EPL-2.0
      </documentation>
   </annotation>

</schema>
