// Generated by jextract

package org.eclipse.core.internal.resources.refresh.linux.inotify;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class inotify_event {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_INT.withName("wd"),
        C_INT.withName("mask"),
        C_INT.withName("cookie"),
        C_INT.withName("len"),
        MemoryLayout.sequenceLayout(C_CHAR).withName("name")
    ).withName("inotify_event");
    public static MemoryLayout $LAYOUT() {
        return inotify_event.$struct$LAYOUT;
    }
    static final VarHandle wd$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("wd"));
    public static VarHandle wd$VH() {
        return inotify_event.wd$VH;
    }
    public static int wd$get(MemorySegment seg) {
        return (int)inotify_event.wd$VH.get(seg);
    }
    public static void wd$set( MemorySegment seg, int x) {
        inotify_event.wd$VH.set(seg, x);
    }
    public static int wd$get(MemorySegment seg, long index) {
        return (int)inotify_event.wd$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wd$set(MemorySegment seg, long index, int x) {
        inotify_event.wd$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle mask$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("mask"));
    public static VarHandle mask$VH() {
        return inotify_event.mask$VH;
    }
    public static int mask$get(MemorySegment seg) {
        return (int)inotify_event.mask$VH.get(seg);
    }
    public static void mask$set( MemorySegment seg, int x) {
        inotify_event.mask$VH.set(seg, x);
    }
    public static int mask$get(MemorySegment seg, long index) {
        return (int)inotify_event.mask$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mask$set(MemorySegment seg, long index, int x) {
        inotify_event.mask$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cookie$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("cookie"));
    public static VarHandle cookie$VH() {
        return inotify_event.cookie$VH;
    }
    public static int cookie$get(MemorySegment seg) {
        return (int)inotify_event.cookie$VH.get(seg);
    }
    public static void cookie$set( MemorySegment seg, int x) {
        inotify_event.cookie$VH.set(seg, x);
    }
    public static int cookie$get(MemorySegment seg, long index) {
        return (int)inotify_event.cookie$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cookie$set(MemorySegment seg, long index, int x) {
        inotify_event.cookie$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle len$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("len"));
    public static VarHandle len$VH() {
        return inotify_event.len$VH;
    }
    public static int len$get(MemorySegment seg) {
        return (int)inotify_event.len$VH.get(seg);
    }
    public static void len$set( MemorySegment seg, int x) {
        inotify_event.len$VH.set(seg, x);
    }
    public static int len$get(MemorySegment seg, long index) {
        return (int)inotify_event.len$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void len$set(MemorySegment seg, long index, int x) {
        inotify_event.len$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


