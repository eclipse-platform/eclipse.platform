/*******************************************************************************
 * Copyright (c) 2024 Vector Informatik GmbH and others.
 *
 * This program and the accompanying materials are made available under the terms of the Eclipse
 * Public License 2.0 which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors: Vector Informatik GmbH - initial API and implementation
 *******************************************************************************/

package org.eclipse.core.tests.filesystem.zip;

import static org.junit.Assert.assertTrue;
import static org.junit.jupiter.api.Assertions.fail;

import java.io.IOException;
import java.net.URISyntaxException;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IFolder;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.ZipFileTransformer;
import org.eclipse.core.runtime.CoreException;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class OpenTest {

	@BeforeEach
	public void setup() throws Exception {
		ZipFileSystemTestSetup.setup();
	}

	@AfterEach
	public void teardown() throws Exception {
		ZipFileSystemTestSetup.teardown();
	}

	@Test
	public void testOpenEmptyZipFile() throws IOException, CoreException, URISyntaxException {
		ZipFileSystemTestSetup.copyZipFileIntoProject(ZipFileSystemTestSetup.projects.get(0),
				ZipFileSystemTestSetup.EMPTY_ZIP_FILE_NAME);
		IProject project = ZipFileSystemTestSetup.projects.get(0);
		IFile zipFile = project.getFile(ZipFileSystemTestSetup.EMPTY_ZIP_FILE_NAME);
		ZipFileSystemTestSetup.ensureExists(zipFile);

		try {
			ZipFileTransformer.openZipFile(zipFile, true);
		} catch (CoreException e) {
			ZipFileSystemTestSetup.ensureExists(zipFile);
			String expectedMessage = "The file is either empty or doesn't represent a ZIP file:";
			assertTrue(e.getMessage().contains(expectedMessage));
		}
	}

	@Test
	public void testOpenNestedZipFileParent() throws IOException, CoreException, URISyntaxException {
		ZipFileSystemTestSetup.copyZipFileIntoProject(ZipFileSystemTestSetup.projects.get(0),
				ZipFileSystemTestSetup.NESTED_ZIP_FILE_PARENT_NAME);
		IFile nestedZipFileParent = ZipFileSystemTestSetup.projects.get(0)
				.getFile(ZipFileSystemTestSetup.NESTED_ZIP_FILE_PARENT_NAME);
		ZipFileSystemTestSetup.ensureExists(nestedZipFileParent);
		ZipFileTransformer.openZipFile(nestedZipFileParent, true);
		IFolder openedNestedZipFileParent = ZipFileSystemTestSetup.projects.get(0)
				.getFolder(ZipFileSystemTestSetup.NESTED_ZIP_FILE_PARENT_NAME);
		ZipFileSystemTestSetup.ensureExists(openedNestedZipFileParent);
	}

	@Test
	public void testOpenNestedZipFileChild() throws IOException, CoreException, URISyntaxException {
		ZipFileSystemTestSetup.copyZipFileIntoProject(ZipFileSystemTestSetup.projects.get(0),
				ZipFileSystemTestSetup.NESTED_ZIP_FILE_PARENT_NAME);
		IFile nestedZipFileParent = ZipFileSystemTestSetup.projects.get(0)
				.getFile(ZipFileSystemTestSetup.NESTED_ZIP_FILE_PARENT_NAME);
		ZipFileSystemTestSetup.ensureExists(nestedZipFileParent);
		ZipFileTransformer.openZipFile(nestedZipFileParent, true);
		IFolder openedNestedZipFileParent = ZipFileSystemTestSetup.projects.get(0)
				.getFolder(ZipFileSystemTestSetup.NESTED_ZIP_FILE_PARENT_NAME);
		ZipFileSystemTestSetup.ensureExists(openedNestedZipFileParent);
		IFile nestedZipFileChild = openedNestedZipFileParent.getFile(ZipFileSystemTestSetup.NESTED_ZIP_FILE_CHILD_NAME);
		ZipFileSystemTestSetup.ensureExists(nestedZipFileChild);

		 // Attempt to open the nested ZIP file and expect an exception
		try {
			ZipFileTransformer.openZipFile(nestedZipFileChild, true);
			fail("Expected a CoreException to be thrown when opening a nested ZIP file");
		} catch (CoreException e) {
			// Verify that the expected exception was thrown
			assertTrue("Expected CoreException to be thrown when opening a nested ZIP file",
					e.getMessage().contains("Nested ZIP files are not allowed to be opened"));

			IFolder openedNestedZipFileChild = ZipFileSystemTestSetup.projects.get(0)
					.getFolder(ZipFileSystemTestSetup.NESTED_ZIP_FILE_CHILD_NAME);
			ZipFileSystemTestSetup.ensureDoesNotExist(openedNestedZipFileChild);
		}
	}

	@Test
	public void testOpenDeepNestedTextFile() throws IOException, CoreException, URISyntaxException {
		ZipFileSystemTestSetup.copyZipFileIntoProject(ZipFileSystemTestSetup.projects.get(0),
				ZipFileSystemTestSetup.NESTED_ZIP_FILE_PARENT_NAME);
		IFile nestedZipFileParent = ZipFileSystemTestSetup.projects.get(0)
				.getFile(ZipFileSystemTestSetup.NESTED_ZIP_FILE_PARENT_NAME);
		ZipFileSystemTestSetup.ensureExists(nestedZipFileParent);
		ZipFileTransformer.openZipFile(nestedZipFileParent, true);
		IFolder openedNestedZipFileParent = ZipFileSystemTestSetup.projects.get(0)
				.getFolder(ZipFileSystemTestSetup.NESTED_ZIP_FILE_PARENT_NAME);
		ZipFileSystemTestSetup.ensureExists(openedNestedZipFileParent);

		String nestedPath = "sub1/Text.txt";
		IFile nestedFile = openedNestedZipFileParent.getFile(nestedPath);
		ZipFileSystemTestSetup.ensureExists(nestedFile);

		String nestedPathShouldFail = "sub2";
		IFolder nestedFileShouldFail = openedNestedZipFileParent.getFolder(nestedPathShouldFail);
		ZipFileSystemTestSetup.ensureDoesNotExist(nestedFileShouldFail);

		String deepNestedPath = "sub1/sub2/sub3/sub4/sub5/sub6/sub8/sub9/sub10/Text.txt";
		IFile deepNestedFile = openedNestedZipFileParent.getFile(deepNestedPath);
		ZipFileSystemTestSetup.ensureExists(deepNestedFile);
	}

	@Test
	public void testOpenFakeZip() {
		try {
			ZipFileSystemTestSetup.copyZipFileIntoProject(ZipFileSystemTestSetup.projects.get(0),
					ZipFileSystemTestSetup.FAKE_ZIP_FILE_NAME);
			IFile fakeZipFile = ZipFileSystemTestSetup.projects.get(0)
					.getFile(ZipFileSystemTestSetup.FAKE_ZIP_FILE_NAME);
			ZipFileSystemTestSetup.ensureExists(fakeZipFile);

			ZipFileTransformer.openZipFile(fakeZipFile, true);
			fail("Expected an IOException due to incorrect file header.");
		} catch (CoreException e) {
			String expectedMessage = "The file is either empty or doesn't represent a ZIP file";
			assertTrue(e.getMessage().contains(expectedMessage));
		} catch (Exception e) {
			fail("Expected a CoreException, but got a different type of exception.");
		}
	}

	@Test
	public void testOpenPasswordProtectedZip() {
		try {
			ZipFileSystemTestSetup.copyZipFileIntoProject(ZipFileSystemTestSetup.projects.get(0),
					ZipFileSystemTestSetup.PASSWORD_PROTECTED_ZIP_FILE_NAME);
			IFile passwordProtectedZipFile = ZipFileSystemTestSetup.projects.get(0)
					.getFile(ZipFileSystemTestSetup.PASSWORD_PROTECTED_ZIP_FILE_NAME);
			ZipFileSystemTestSetup.ensureExists(passwordProtectedZipFile);

			ZipFileTransformer.openZipFile(passwordProtectedZipFile, true);
			fail("Expected an IOException due to password protection.");
		} catch (CoreException e) {
			String expectedMessage = "Opening encrypted ZIP files is not supported:";
			assertTrue("Expected message: " + expectedMessage, e.getMessage().contains(expectedMessage));
		} catch (Exception e) {
			fail("Expected a CoreException, but got a different type of exception.");
		}
	}
}
